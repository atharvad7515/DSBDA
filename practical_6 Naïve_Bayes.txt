import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,classification_report,accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import LabelEncoder


csv_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
data = pd.read_csv(csv_url)


col_names = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width','Species']
data = pd.read_csv(csv_url, names = col_names)
data.head(5)



data.describe(include = 'all')



data.info()



print(data.shape)
data['Species'].unique()


data.isnull().sum()

x = data.iloc[:,1:4]
y = data.iloc[:,4:]


encode = LabelEncoder()
y = encode.fit_transform(y)


x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 0)


naive_bayes = GaussianNB()
naive_bayes.fit(x_train,y_train)
pred = naive_bayes.predict(x_test)



pred

y_test


matrix = confusion_matrix(y_test, pred, labels = naive_bayes.classes_)
print(matrix)
tp, fn, fp, tn = confusion_matrix(y_test, pred, labels=[1,0]).reshape(-1)


conf_matrix = ConfusionMatrixDisplay(confusion_matrix=matrix, display_labels=naive_bayes.classes_)
conf_matrix.plot(cmap=plt.cm.YlGn)
plt.show()



print(classification_report(y_test,pred))



print('\nAccuracy: {:.2f}'.format(accuracy_score(y_test,pred)))
print('Error Rate: ',(fp+fn)/(tp+tn+fn+fp))
print('Sensitivity (Recall or True positive rate) :',tp/(tp+fn))
print('Specificity (True negative rate) :',tn/(fp+tn))
print('Precision (Positive predictive values) :',tp/(tp+fp))
print('False Positive Rate :',fp/(tn+fp))



